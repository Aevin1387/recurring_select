<%
  template_path = File.expand_path("../templates/recurring_select/dialog_template.html", File.dirname(__FILE__))
  File.open(template_path) do |file|
    @template = file.read
  end
%>

window.RecurringSelectDialog =
  class RecurringSelectDialog
    constructor: (@recurring_selector) ->
      @current_rule = @recurring_selector.recurring_select('current_rule')
      @initDialogBox()
      if !(@current_rule.hash? && (rule_type = @current_rule.hash.rule_type)?)
        @freqChanged()
      else
        setTimeout @positionDialogVert, 10 # allow initial render


    initDialogBox: ->
      $(".rs_dialog_holder").remove()
      $("body").append "<%= ActionController::Base.helpers.escape_javascript @template %>"
      @outer_holder = $(".rs_dialog_holder")
      @inner_holder = @outer_holder.find ".rs_dialog"
      @content = @outer_holder.find ".rs_dialog_content"

      @positionDialogVert(true)
      @mainEventInit()
      @freqInit()
      @summaryInit()
      @freq_select.focus()
      
      
    positionDialogVert: (initial_positioning) =>
      window_height = $(window).height()
      window_width  = $(window).width()  
      dialog_height = @content.outerHeight()
      if dialog_height < 80
        dialog_height = 80
      margin_top = (window_height - dialog_height)/2 - 30
      margin_top = 0 if margin_top < 0
      new_style_hash =
        "margin-top": margin_top+"px"
        "height":dialog_height+"px"

      if initial_positioning?
        @inner_holder.css new_style_hash
      else
        @content.css {"width": @content.width()+"px"}
        @inner_holder.addClass "animated"
        @inner_holder.animate new_style_hash, 200, =>
          @inner_holder.removeClass "animated"
          @content.css {"width": "auto"}
        
    cancel: =>
      @outer_holder.remove()
      @recurring_selector.recurring_select('cancel')

    save: =>
      return if !@current_rule.str?
      @outer_holder.remove()
      @recurring_selector.recurring_select('save', @current_rule)

# ========================= Init Methods ===============================

    mainEventInit: ->
      # Additional events are for jQuery Mobile
      @outer_holder.on 'click tap', @cancel
      @inner_holder.on 'click tap taphold swipe vclick', (event) -> 
        event.stopPropagation()
        event.preventDefault()
      @content.on 'click tap', 'h1 a', @cancel
      @save_button = @content.find('input.rs_save').on "click tap", @save
      @content.find('input.rs_cancel').on "click tap", @cancel

    freqInit: ->
      @freq_select = @outer_holder.find ".rs_frequency"
      if @current_rule.hash? && (rule_type = @current_rule.hash.rule_type)?
        if rule_type.search(/Weekly/) != -1
          @freq_select.prop('selectedIndex', 1)
          @initWeeklyOptions()
        else if rule_type.search(/Monthly/) != -1
          @freq_select.prop('selectedIndex', 2)
          @initMonthlyOptions()
        else if rule_type.search(/Yearly/) != -1
          @freq_select.prop('selectedIndex', 3)
          @initYearlyOptions()
        else
          @initDailyOptions()
      @freq_select.on "change", @freqChanged

    initDailyOptions: ->
      section = @content.find('.daily_options')
      interval_input = section.find('.rs_daily_interval')
      interval_input.val(@current_rule.hash.interval)
      interval_input.on "change keyup", @intervalChanged
      section.show()
      
    initWeeklyOptions: ->
      section = @content.find('.weekly_options')

      # connect the interval field
      interval_input = section.find('.rs_weekly_interval')
      interval_input.val(@current_rule.hash.interval)
      interval_input.on "change keyup", @intervalChanged
      
      # connect the day fields
      if @current_rule.hash.validations? && @current_rule.hash.validations.day?
        $(@current_rule.hash.validations.day).each (index, val) ->
          section.find(".day_selector input[value='"+val+"']").prop("checked", true)
      section.on "change", ".day_selector input", @daysChanged
      
      section.on "click tap", ".day_selector input[type='checkbox']", (event) -> event.stopPropagation()
      
      section.show()
      
    initMonthlyOptions: ->
      section = @content.find('.monthly_options')
      interval_input = section.find('.rs_monthly_interval')
      interval_input.val(@current_rule.hash.interval)
      interval_input.on "change keyup", @intervalChanged
      
      @current_rule.hash.validations ||= {}
      @current_rule.hash.validations.day_of_month ||= []
      monthly_calendar = section.find(".rs_calendar")
      monthly_calendar.html ""
      for num in [1..31]
        monthly_calendar.append (day_link = $(document.createElement("a")).text(num))
        if $.inArray(num, @current_rule.hash.validations.day_of_month) != -1
          day_link.addClass("selected")
      monthly_calendar.find("a").on "click tap", @dayOfMonthChanged
      section.show()
      
    initYearlyOptions: ->
      section = @content.find('.yearly_options')
      interval_input = section.find('.rs_yearly_interval')
      interval_input.val(@current_rule.hash.interval)
      interval_input.on "change keyup", @intervalChanged
      section.show()
      

    summaryInit: ->
      @summary = @outer_holder.find(".rs_summary")
      @summaryUpdate()

# ========================= render methods ===============================

    summaryUpdate: (new_string) =>
      if @current_rule.hash? && @current_rule.str?
        @summary.removeClass "fetching"
        @save_button.removeClass("disabled")
        rule_str = @current_rule.str.replace("*", "")
        if rule_str.length < 20
          rule_str = "Summary: "+rule_str
        @summary.find("span").html rule_str
      else
        @summary.addClass "fetching"
        @save_button.addClass("disabled")
        @summary.find("span").html ""
        @summaryFetch()
    
    summaryFetch: ->
      return if !(@current_rule.hash? && (rule_type = @current_rule.hash.rule_type)?)
      @content.css {"width": @content.width()+"px"}
      $.ajax
        url: "/recurring_select/translate",
        type: "POST",
        data: @current_rule.hash
        success: @summaryFetchSuccess

    summaryFetchSuccess: (data) =>
      @current_rule.str = data
      @summaryUpdate()
      @content.css {"width": "auto"}

# ========================= Change callbacks ===============================      

    freqChanged: =>
      @current_rule.hash ||= {}
      @current_rule.hash.interval = 1
      @current_rule.hash.until = null
      @current_rule.hash.count = null
      @current_rule.hash.validations = null
      @content.find(".freq_option_section").hide();
      @content.find("input[type=radio], input[type=checkbox]").prop("checked", false)
      switch @freq_select.val()
        when "Weekly"
          @current_rule.hash.rule_type = "IceCube::WeeklyRule"
          @current_rule.str = "Weekly"
          @initWeeklyOptions()
        when "Monthly"
          @current_rule.hash.rule_type = "IceCube::MonthlyRule"
          @current_rule.str = "Monthly"
          @initMonthlyOptions()
        when "Yearly"
          @current_rule.hash.rule_type = "IceCube::YearlyRule"
          @current_rule.str = "Yearly"
          @initYearlyOptions()
        else
          @current_rule.hash.rule_type = "IceCube::DailyRule"
          @current_rule.str = "Daily"
          @initDailyOptions()
      @summaryUpdate()
      @positionDialogVert()
    
    intervalChanged: (event) =>
      @current_rule.str = null
      @current_rule.hash ||= {}
      @current_rule.hash.interval = parseInt($(event.currentTarget).val())
      if @current_rule.hash.interval < 1 || isNaN(@current_rule.hash.interval)
        @current_rule.hash.interval = 1 
        # $(event.currentTarget).val(@current_rule.hash.interval)      
      @summaryUpdate()
      
    daysChanged: =>
      @current_rule.str = null
      @current_rule.hash ||= {}
      @current_rule.hash.validations = {}
      raw_days = @content.find(".day_selector input:checked").map -> parseInt($(this).val())
      @current_rule.hash.validations.day = raw_days.get()
      @summaryUpdate()
      
    dayOfMonthChanged: (event) =>
      $(event.currentTarget).toggleClass("selected")
      @current_rule.str = null
      @current_rule.hash ||= {}
      @current_rule.hash.validations = {}
      raw_days = @content.find(".monthly_options a.selected").map -> parseInt($(this).text())
      @current_rule.hash.validations.day_of_month = raw_days.get()
      @summaryUpdate()
    
